{"name": "test_remove_item_from_cart", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a datalayer-removefromcart=\"\" data-id=\"20681\" role=\"button\" href=\"https://www.foxhome.co.il/checkout/sidebar/updateItemQty/?item_id=15832149&amp;item_qty=0\" data-cart-item=\"15832149\" title=\"אפשרויות פרטים\" class=\"action delete\" uatype=\"כפתור\" aria-label=\"כפתור הסרת פריט מסל הקניות\" andialreadysetasbtn=\"true\" tabindex=\"0\" style=\"cursor: pointer;\">...</a> is not clickable at point (473, 579). Other element would receive the click: <div id=\"ZA_CAMP_BG\" style=\"background-color: rgba(0, 0, 0, 0.7); height: 100%; left: 0px; position: fixed; top: 0px; width: 100%; z-index: 2147483646; opacity: 0.9 !important;\"></div>\n  (Session info: chrome=127.0.6533.100)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6432C9632+30946]\n\t(No symbol) [0x00007FF64327E3C9]\n\t(No symbol) [0x00007FF643176FDA]\n\t(No symbol) [0x00007FF6431CFEEE]\n\t(No symbol) [0x00007FF6431CD962]\n\t(No symbol) [0x00007FF6431CAE7B]\n\t(No symbol) [0x00007FF6431CA095]\n\t(No symbol) [0x00007FF6431BC271]\n\t(No symbol) [0x00007FF6431ECA6A]\n\t(No symbol) [0x00007FF6431BBBB6]\n\t(No symbol) [0x00007FF6431ECC80]\n\t(No symbol) [0x00007FF64320B041]\n\t(No symbol) [0x00007FF6431EC813]\n\t(No symbol) [0x00007FF6431BA6E5]\n\t(No symbol) [0x00007FF6431BB021]\n\tGetHandleVerifier [0x00007FF6433FF83D+1301229]\n\tGetHandleVerifier [0x00007FF64340BDB7+1351783]\n\tGetHandleVerifier [0x00007FF643402A03+1313971]\n\tGetHandleVerifier [0x00007FF6432FDD06+245686]\n\t(No symbol) [0x00007FF64328758F]\n\t(No symbol) [0x00007FF643283804]\n\t(No symbol) [0x00007FF643283992]\n\t(No symbol) [0x00007FF64327A3EF]\n\tBaseThreadInitThunk [0x00007FFD62AD7374+20]\n\tRtlUserThreadStart [0x00007FFD6465CC91+33]", "trace": "self = <test.test_cart_ui.TestCart testMethod=test_remove_item_from_cart>\n\n     def test_remove_item_from_cart(self):\n         \"\"\"\n         add element to cart then remove it and validate cart is empty\n         :return:\n         \"\"\"\n         # arrange\n         self.search_result.click_add_to_cart(1)\n         # navigate to cart list page\n    #     self.navbar.navigate_to_cart_list()\n         self.cart_pop = CartPopUp(self.driver)\n         self.cart_pop.click_go_to_cart()\n         self.cart_page = CartPage(self.driver)\n    \n         # act\n>        self.cart_page.click_remove_from_cart(1)\n\ntest_cart_ui.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\logic\\browser\\pages\\cart_page.py:40: in click_remove_from_cart\n    fav_button.click()\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000028DE1496640>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF64327A3EF]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD62AD7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFD6465CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a datalayer-removefromcart=\"\" data-id=\"20681\" role=\"button\" href=\"https://www.foxhome.co.il/checkout/sidebar/updateItemQty/?item_id=15832149&amp;item_qty=0\" data-cart-item=\"15832149\" title=\"אפשרויות פרטים\" class=\"action delete\" uatype=\"כפתור\" aria-label=\"כפתור הסרת פריט מסל הקניות\" andialreadysetasbtn=\"true\" tabindex=\"0\" style=\"cursor: pointer;\">...</a> is not clickable at point (473, 579). Other element would receive the click: <div id=\"ZA_CAMP_BG\" style=\"background-color: rgba(0, 0, 0, 0.7); height: 100%; left: 0px; position: fixed; top: 0px; width: 100%; z-index: 2147483646; opacity: 0.9 !important;\"></div>\nE         (Session info: chrome=127.0.6533.100)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6432C9632+30946]\nE       \t(No symbol) [0x00007FF64327E3C9]\nE       \t(No symbol) [0x00007FF643176FDA]\nE       \t(No symbol) [0x00007FF6431CFEEE]\nE       \t(No symbol) [0x00007FF6431CD962]\nE       \t(No symbol) [0x00007FF6431CAE7B]\nE       \t(No symbol) [0x00007FF6431CA095]\nE       \t(No symbol) [0x00007FF6431BC271]\nE       \t(No symbol) [0x00007FF6431ECA6A]\nE       \t(No symbol) [0x00007FF6431BBBB6]\nE       \t(No symbol) [0x00007FF6431ECC80]\nE       \t(No symbol) [0x00007FF64320B041]\nE       \t(No symbol) [0x00007FF6431EC813]\nE       \t(No symbol) [0x00007FF6431BA6E5]\nE       \t(No symbol) [0x00007FF6431BB021]\nE       \tGetHandleVerifier [0x00007FF6433FF83D+1301229]\nE       \tGetHandleVerifier [0x00007FF64340BDB7+1351783]\nE       \tGetHandleVerifier [0x00007FF643402A03+1313971]\nE       \tGetHandleVerifier [0x00007FF6432FDD06+245686]\nE       \t(No symbol) [0x00007FF64328758F]\nE       \t(No symbol) [0x00007FF643283804]\nE       \t(No symbol) [0x00007FF643283992]\nE       \t(No symbol) [0x00007FF64327A3EF]\nE       \tBaseThreadInitThunk [0x00007FFD62AD7374+20]\nE       \tRtlUserThreadStart [0x00007FFD6465CC91+33]\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "description": "\n        add element to cart then remove it and validate cart is empty\n        :return:\n        ", "start": 1723447955417, "stop": 1723448063360, "uuid": "66cae3ad-ea9b-4fa4-a691-9b33ad847916", "historyId": "016a0a36e1249431cf600b329393987d", "testCaseId": "016a0a36e1249431cf600b329393987d", "fullName": "test_cart_ui.TestCart#test_remove_item_from_cart", "labels": [{"name": "suite", "value": "test_cart_ui"}, {"name": "subSuite", "value": "TestCart"}, {"name": "host", "value": "DESKTOP-K7V76BU"}, {"name": "thread", "value": "15924-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cart_ui"}]}